@model StocKeeper.Models.PurchaseOrders

@{
    ViewBag.Title = "Purchase Order Details";
}

<div class="container mt-4">
    <div class="card mb-3">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h2>Purchase Order #@Model.OrderId</h2>
                <div>
                    @if (Model.Status.ToLower() == "pending")
                    {
                        @Html.ActionLink("Edit", "Edit", new { id = Model.OrderId }, new { @class = "btn btn-primary" })
                    }
                    <a href="@Url.Action("Index")" class="btn btn-secondary ms-2">Back to List</a>
                </div>
            </div>
        </div>

        <div class="card-body">
            <!-- Order Information Section -->
            <div class="row">
                <div class="col-md-6">
                    <h4>Order Information</h4>
                    <table class="table">
                        <tr>
                            <th>Supplier</th>
                            <td>@Model.Supplier.Name</td>
                        </tr>
                        <tr>
                            <th>Order Date</th>
                            <td>@Model.OrderDate.ToString("MM-dd-yyyy HH:mm")</td>
                        </tr>
                        <tr>
                            <th>Expected Delivery</th>
                            <td>
                                @(Model.ExpectedDeliveryDate.HasValue ?
                                    Model.ExpectedDeliveryDate.Value.ToString("MM-dd-yyyy HH:mm") : "-")
                            </td>
                        </tr>
                        <tr>
                            <th>Status</th>
                            <td>
                                <span class="badge @(Model.Status.ToLower() switch
                                {
                                    "pending" => "bg-warning",
                                    "confirmed" => "bg-info",
                                    "delivered" => "bg-success",
                                    "cancelled" => "bg-danger",
                                    _ => "bg-secondary"
                                })">@Model.Status</span>
                            </td>
                        </tr>
                        @if (Model.DeliveryDate.HasValue)
                        {
                            <tr>
                                <th>Delivery Date</th>
                                <td>
                                    @(Model.DeliveryDate.HasValue
                                        ? Model.DeliveryDate.Value.ToString("MM-dd-yyyy HH:mm")
                                        : "Not delivered")
                                </td>
                            </tr>
                        }
                        <tr>
                            <th>Total Amount</th>
                            <td>@Model.TotalAmount.ToString("C")</td>
                        </tr>
                    </table>
                </div>

                <div class="col-md-6">
                    <h4>Notes</h4>
                    <div class="card">
                        <div class="card-body bg-dark border">
                            @(string.IsNullOrEmpty(Model.Notes) ? "No notes provided" : Model.Notes)
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Details Section -->
            <h4 class="mt-4">Order Details</h4>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th class="text-end">Quantity</th>
                            <th class="text-end">Unit Price</th>
                            <th class="text-end">Total Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.OrderDetails)
                        {
                            <tr>
                                <td>@item.Product.Name</td>
                                <td class="text-end">@item.Quantity</td>
                                <td class="text-end">@item.UnitPrice.ToString("C")</td>
                                <td class="text-end">@item.TotalPrice.ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr class="table-active">
                            <td colspan="3" class="text-end fw-bold">Total:</td>
                            <td class="text-end fw-bold">@Model.TotalAmount.ToString("C")</td>
                        </tr>
                    </tfoot>
                </table>
            </div>

            <!-- Status Update Buttons -->
            @if (Model.Status.ToLower() == "pending")
            {
                <div class="mt-4">
                    <div class="btn-group">
                        @using (Html.BeginForm("UpdateStatus", "PurchaseOrder", new { id = Model.OrderId }, FormMethod.Post, new { style = "display: inline;" }))
                        {
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="status" value="Confirmed" />
                            <button type="submit" class="btn btn-warning me-2">
                                Confirm Order
                            </button>
                        }

                        @using (Html.BeginForm("UpdateStatus", "PurchaseOrder", new { id = Model.OrderId }, FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="status" value="Delivered" />
                            <button type="submit" class="btn btn-success">
                                Mark as Delivered
                            </button>
                        }

                        @using (Html.BeginForm("UpdateStatus", "PurchaseOrder", new { id = Model.OrderId }, FormMethod.Post, new { style = "display: inline;" }))
                        {
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="status" value="Cancelled" />
                            <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to cancel this order?');">
                                Cancel Order
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>