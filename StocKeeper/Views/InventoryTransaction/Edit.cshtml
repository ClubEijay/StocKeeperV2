@model StocKeeper.Models.InventoryTransaction
@{
    ViewBag.Title = "Edit Inventory Transaction";
}

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <h2>Edit Inventory Transaction</h2>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("Edit", "InventoryTransaction", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(m => m.TransactionId)

                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ProductId, "Product", new { @class = "control-label" })
                            @Html.DropDownList("ProductId", null, "Select Product", new { @class = "form-control", required = "required", id = "ProductId" })
                            @Html.ValidationMessageFor(m => m.ProductId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Current Stock</label>
                            <input type="number" class="form-control" id="CurrentStock" readonly />
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.TransactionDate, new { @class = "control-label" })
                            @Html.EditorFor(m => m.TransactionDate, new
                            {
                                htmlAttributes = new
                                {
                                    @class = "form-control",
                                    @type = "datetime-local",
                                    @value = Model.TransactionDate.ToString("MM-dd-yyyyTHH:mm"),
                                    required = "required"
                                }
                            })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.TransactionType, new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.TransactionType,
                                new List<SelectListItem> {
                                    new SelectListItem { Text = "Stock In", Value = "IN" },
                                    new SelectListItem { Text = "Stock Out", Value = "OUT" }
                                },
                                "Select Transaction Type",
                                new { @class = "form-control", required = "required" })
                            @Html.ValidationMessageFor(m => m.TransactionType, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Quantity, new { @class = "control-label" })
                            @Html.EditorFor(m => m.Quantity, new { htmlAttributes = new { @class = "form-control", @type = "number", min = "1", required = "required" } })
                            @Html.ValidationMessageFor(m => m.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ReferenceNumber, new { @class = "control-label" })
                            @Html.EditorFor(m => m.ReferenceNumber, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter reference number" } })
                            @Html.ValidationMessageFor(m => m.ReferenceNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-12">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Reason, new { @class = "control-label" })
                            @Html.TextAreaFor(m => m.Reason, new { @class = "form-control", rows = "3", placeholder = "Enter reason for transaction" })
                            @Html.ValidationMessageFor(m => m.Reason, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12">
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">Update Transaction</button>
                            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-secondary" })
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
        $(document).ready(function () {
        // Function to update current stock
        function updateCurrentStock() {
            var productId = $("#ProductId").val();
            if (productId) {
                $.get("/InventoryTransaction/GetCurrentStock/" + productId, function (currentStock) {
                    $("#CurrentStock").val(currentStock);
                });
            } else {
                $("#CurrentStock").val("");
            }
        }

        // Update current stock when product is selected
        $("#ProductId").change(updateCurrentStock);

        // Add client-side validation for quantity when transaction type changes
        $("#TransactionType").change(function () {
            var productId = $("#ProductId").val();
            if (productId && $(this).val() === "OUT") {
                // Get current stock for selected product
                $.get("/InventoryTransaction/GetCurrentStock/" + productId, function (currentStock) {
                    $("#Quantity").attr("max", currentStock);
                    $("#Quantity").attr("data-val-range-max", currentStock);
                    $("#Quantity").attr("data-val-range", "Cannot withdraw more than current stock (" + currentStock + ")");
                });
            } else {
                $("#Quantity").removeAttr("max");
                $("#Quantity").removeAttr("data-val-range-max");
                $("#Quantity").removeAttr("data-val-range");
            }
        });

        // Initial current stock update on page load
        updateCurrentStock();

        // Populate initial values
        $("#ProductId").val(@Model.ProductId);
        $("#ProductId").trigger('change');

        // Explicitly set the datetime-local value
        var transactionDate = '@Model.TransactionDate.ToString("MM-dd-yyyyTHH:mm")';
        $("#TransactionDate").val(transactionDate);
    });
</script>
}