@model StocKeeper.Models.Supplier
@{
    ViewBag.Title = "Edit Supplier";
}

<div class="container py-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Edit Supplier</h3>
            <div>
                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-outline-light" })
            </div>
        </div>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.SupplierId)

            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="alert @(Model.IsActive ? "alert-success" : "alert-warning") mb-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong>Current Status:</strong>
                            <span class="ms-2 badge @(Model.IsActive ? "bg-success" : "bg-warning")">
                                @(Model.IsActive ? "Active" : "Disabled")
                            </span>
                        </div>
                        <div class="form-check form-switch">
                            @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-check-input", role = "switch", id = "statusToggle" })
                            <label class="form-check-label" for="statusToggle">
                                Toggle Status
                            </label>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <h4 class="text-primary mb-3">Basic Information</h4>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Name, "Company Name", new { @class = "form-label" })
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.ContactPerson, "Contact Person", new { @class = "form-label" })
                            @Html.EditorFor(model => model.ContactPerson, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ContactPerson, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Email, new { @class = "form-label" })
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", type = "email" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Phone, new { @class = "form-label" })
                            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", type = "tel" } })
                            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <h4 class="text-primary mb-3">Address Information</h4>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Address, new { @class = "form-label" })
                            @Html.TextAreaFor(model => model.Address, new { @class = "form-control", rows = "4" })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>

                        <div class="card mt-4 @(Model.IsActive ? "border-success" : "border-warning")">
                            <div class="card-body">
                                <h5 class="card-title">Supplier Statistics</h5>
                                <ul class="list-unstyled mb-0">
                                    <li class="mb-2">
                                        <strong>Total Products:</strong> @Model.Products.Count
                                    </li>
                                    <li class="mb-2">
                                        <strong>Purchase Orders:</strong> @Model.PurchaseOrders.Count
                                    </li>
                                    <li>
                                        <strong>Last Updated:</strong> @DateTime.Now.ToString("MMMM dd, yyyy")
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-footer">
                <div class="d-flex justify-content-between align-items-center">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-save"></i> Save Changes
                    </button>
                    <div id="statusWarning" class="text-warning" style="display: none;">
                        <i class="bi bi-exclamation-triangle"></i>
                        Warning: Disabling a supplier will affect related products and orders
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            // Add custom phone number validation
            $.validator.addMethod("phoneFormat", function (value, element) {
                return this.optional(element) || /^[\d\s\-\+\(\)]+$/.test(value);
            }, "Please enter a valid phone number");

            // Initialize form validation
            $("form").validate({
                rules: {
                    Phone: {
                        phoneFormat: true
                    }
                }
            });

            // Handle status toggle
            $("#statusToggle").change(function () {
                const isActive = $(this).prop('checked');
                const alert = $(this).closest('.alert');
                const statusBadge = alert.find('.badge');
                const warning = $('#statusWarning');

                // Update UI
                alert.removeClass('alert-success alert-warning')
                    .addClass(isActive ? 'alert-success' : 'alert-warning');
                statusBadge.removeClass('bg-success bg-warning')
                    .addClass(isActive ? 'bg-success' : 'bg-warning')
                    .text(isActive ? 'Active' : 'Disabled');

                // Show/hide warning
                if (!isActive) {
                    warning.fadeIn();
                } else {
                    warning.fadeOut();
                }
            });
        });
    </script>
}