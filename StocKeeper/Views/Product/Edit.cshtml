@model StocKeeper.Models.PurchaseOrders

@{
    ViewBag.Title = "Edit Purchase Order";
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        let orderDetails = [];

        $(document).ready(function() {
            // Initialize supplier's products
            updateProductList($('#SupplierId').val());

            // Initialize existing order details
            @foreach (var detail in Model.OrderDetails)
            {
                @:addOrderDetail(@detail.ProductId, @detail.Quantity, @detail.UnitPrice);
            }

            updateTotalAmount();

            // Validate dates
            $('#ExpectedDeliveryDate').attr('min', $('#OrderDate').val());
            $('#OrderDate').change(function() {
                $('#ExpectedDeliveryDate').attr('min', $(this).val());
                if ($('#ExpectedDeliveryDate').val() < $(this).val()) {
                    $('#ExpectedDeliveryDate').val($(this).val());
                }
            });
        });

        function updateProductList(supplierId) {
            if (supplierId) {
                $.get('@Url.Action("GetSupplierProducts")?supplierId=' + supplierId, function(data) {
                    const productSelects = $('.product-select');
                    productSelects.empty();
                    productSelects.append('<option value="">Select Product</option>');
                    data.forEach(function(product) {
                        productSelects.append(`<option value="${product.productId}"
                            data-price="${product.unitPrice}">${product.name}</option>`);
                    });
                });
            }
        }

        $('#SupplierId').change(function() {
            updateProductList($(this).val());
        });

        function addOrderDetail(productId = '', quantity = '', unitPrice = '') {
            const index = orderDetails.length;
            const template = `
                <tr class="order-detail-row" data-index="${index}">
                    <td>
                        <select name="orderDetails[${index}].ProductId" class="form-select product-select" required>
                            <option value="">Select Product</option>
                        </select>
                    </td>
                    <td>
                        <input type="number" name="orderDetails[${index}].Quantity" class="form-control quantity-input"
                               placeholder="Quantity" required min="1" />
                    </td>
                    <td>
                        <input type="number" name="orderDetails[${index}].UnitPrice" class="form-control unit-price-input"
                               readonly />
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" onclick="removeOrderDetail(${index})">
                            Remove
                        </button>
                    </td>
                </tr>`;

            $('#orderDetailsTable tbody').append(template);

            if (productId) {
                $(`select[name="orderDetails[${index}].ProductId"]`).val(productId);
                $(`input[name="orderDetails[${index}].Quantity"]`).val(quantity);
                $(`input[name="orderDetails[${index}].UnitPrice"]`).val(unitPrice);
            }

            orderDetails.push({ index });

            // Bind product change event
            $(`select[name="orderDetails[${index}].ProductId"]`).change(function() {
                const selectedOption = $(this).find('option:selected');
                const unitPrice = selectedOption.data('price');
                $(`input[name="orderDetails[${index}].UnitPrice"]`).val(unitPrice);
                updateTotalAmount();
            });
        }

        function removeOrderDetail(index) {
            $(`.order-detail-row[data-index="${index}"]`).remove();
            orderDetails = orderDetails.filter(x => x.index !== index);
            updateTotalAmount();
        }

        function updateTotalAmount() {
            let total = 0;
            $('.order-detail-row').each(function() {
                const quantity = $(this).find('.quantity-input').val();
                const unitPrice = $(this).find('.unit-price-input').val();
                if (quantity && unitPrice) {
                    total += quantity * unitPrice;
                }
            });
            $('#totalAmount').text(total.toFixed(2));
        }

        $(document).on('change', '.quantity-input', updateTotalAmount);
    </script>
}

<div class="container mt-4">
    <div class="card mb-3">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h2>Purchase Order #@Model.OrderId</h2>
                <div>
                    <a href="@Url.Action("Index")" class="btn btn-secondary me-2">Back to List</a>

                    @* Dynamically show order status action buttons *@
                    @if (Model.Status == "Pending")
                    {
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#confirmOrderModal">
                            Confirm Order
                        </button>
                    }
                    else if (Model.Status == "Shipped")
                    {
                        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#markDeliveredModal">
                            Mark as Delivered
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="card-body">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.OrderId)

                <div class="row">
                    <div class="col-md-6">
                        <h4>Order Information</h4>
                        <table class="table">
                            <tr>
                                <th>Supplier</th>
                                <td>
                                    @Html.DropDownList("SupplierId", (SelectList)ViewBag.SupplierList, new { @class = "form-select" })
                                    @Html.ValidationMessageFor(model => model.SupplierId, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                            <tr>
                                <th>Order Date</th>
                                <td>
                                    @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                                    @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                            <tr>
                                <th>Expected Delivery</th>
                                <td>
                                    @Html.EditorFor(model => model.ExpectedDeliveryDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                                    @Html.ValidationMessageFor(model => model.ExpectedDeliveryDate, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                            <tr>
                                <th>Status</th>
                                <td>
                                    @Html.DropDownListFor(model => model.Status,
                                        new SelectList(new[] { "Pending", "Shipped", "Delivered", "Cancelled" }),
                                        new { @class = "form-select", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                        </table>
                    </div>

                    <div class="col-md-6">
                        <h4>Notes</h4>
                        <div class="card">
                            <div class="card-body bg-dark border">
                                @Html.TextAreaFor(model => model.Notes, new { @class = "form-control", rows = "5" })
                                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-4">
                    <h4>Order Details</h4>
                    <button type="button" class="btn btn-secondary" onclick="addOrderDetail()">
                        Add Product
                    </button>
                </div>

                <div class="table-responsive mt-3">
                    <table id="orderDetailsTable" class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Quantity</th>
                                <th>Unit Price</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Order details will be added here dynamically -->
                        </tbody>
                    </table>
                </div>

                <div class="row mb-4">
                    <div class="col-md-6 offset-md-6">
                        <div class="card bg-dark">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <h5 class="mb-0">Total Amount:</h5>
                                    <h5 class="mb-0">$<span id="totalAmount">0.00</span></h5>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                if (Model.Status == "Pending")
                {
                    <div class="modal fade" id="confirmOrderModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Confirm Order</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    Are you sure you want to confirm this order and change its status to Shipped?
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="submit" formaction="@Url.Action("UpdateStatus", new { id = Model.OrderId, status = "Shipped" })" class="btn btn-primary">Confirm Order</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (Model.Status == "Shipped")
                {
                    <div class="modal fade" id="markDeliveredModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Mark Order as Delivered</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    Are you sure you want to mark this order as Delivered? This will update the inventory.
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="submit" formaction="@Url.Action("UpdateStatus", new { id = Model.OrderId, status = "Delivered" })" class="btn btn-success">Mark as Delivered</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>